Sistema Síncrono
Um sistema síncrono (synchronous) é uma tarefa que é concluída após a outra.

No exemplo apresentado na aula, uma imagem só carrega depois que a anterior termina de carregar. Ou seja, no sistema síncrono a tarefa anterior precisa ser concluída, para então iniciar a próxima.

Por padrão, o JavaScript é um sistema síncrono
----------------------------------------------------------------
-----------------------------------------------------------------
Sistema Assíncrono
Num sistema assíncrono (asynchronous) as tarefas são executadas de maneira independente uma da outra.

No exemplo apresentado na aula, as imagens são carregadas de maneira independente, não é necessário esperar a primeira imagem carregar para iniciar o carregamento da próxima.

O JavaScript poderá usar o assincronismo ao seu favor

----------------------------------------------------------------
-----------------------------------------------------------------


Callback Conceito

Antes de entender o conceito de Callback no JavaScript, primeiro precisamos entender que funções aceitam qualquer tipo de dado como argumento, então no JavaScript é possível passar qualquer tipo de dado em uma função.

function imprimirDado(dado) {
  console.log(dado)
}

imprimirDado(1)
imprimirDado('texto')
imprimirDado(true)
imprimirDado({ nome: 'João' })
imprimirDado([1, 2, 3])


function imprimirDado(dado) {
  console.log('outras tarefas')
  console.log(dado())
}

imprimirDado(function () {
  return 'Olá Mundo'
})


Callback (chamar de volta) é uma função que é passada como argumento de outra função e depois de algum tempo ela é chamada de volta.

----------------------------------------------------------------
-----------------------------------------------------------------
Set TimeOut
setTimeout() é uma função que recebe como argumento uma outra função e um tempo para ser executada.

// setTimeout(function, delay)
setTimeout(function () {
	console.log('depois de 1s')
}, 1000)
A função de argumento do setTimeout é uma callback, ela vai executar depois de um certo tempo. No caso do exemplo acima, a função vai ser executada depois de 1000ms que é o mesmo que 1s.

----------------------------------------------------------------
-----------------------------------------------------------------
Conectando API com HTTPS e Callback
Nesta aula vamos verificar se estamos entendendo como que funciona o callback e o assincronismo no JavaScript.

Código da aula:

const https = require('http')
const API = 'https://jsonplaceholder.typicode.com/users?_limit=2'

https.get(API, res => {
	console.log(res.statusCode)
})

console.log('conectando API')

executou primeiro o console.log('conectando a api')
 pois a arrow function (callback) executou após algumas tarefas, exepmlos conecatra a api

----------------------------------------------------------------
----------------------------------------------------------------
 Promise intro
 Nas próximas aulas iremos ver mais sobre Promises no JavaScript.

----------------------------------------------------------------
----------------------------------------------------------------
O que é uma Promise no JavaScript?

É um objeto JavaScript com a promessa de que algo será realizado
É usado para operações assíncronas
Não bloqueia outras operações
Essa promessa não significa que vai dar certo ou que vai dar errado.
Exemplo:

Carregar um arquivo
Leitura de dados de uma API
Uma promessa poderá ser:

Pending: Estado inicial, assim que o objeto da promessa é iniciado
Fulfilled: A promessa foi concluída com sucesso
Rejected: A promessa foi rejeitada, houve um erro
Settled: Seja com sucesso ou erro, ela foi finalmente concluída

----------------------------------------------------------------
----------------------------------------------------------------


Como criar uma promessa?
Nesta aula vamos ver na prática quais são os detalhes de uma Promise no javaScript

// Promessa retorna com sucesso
console.log('pedir uber') 
const promessa = new Promise((resolve, reject) => {
	return resolve('carro chegou')
})

console.log('aguardando')

promessa.then(result => console.log(result))

// Promessa é rejeitada e usamos o catch() para capturar o erro
console.log('pedir uber') 
const promessa = new Promise((resolve, reject) => {
	return reject('pedido negado!')
})

console.log('aguardando')

promessa
	.then(result => console.log(result))
	.catch(erro => console.log(erro))
let aceitar = true

console.log('pedir uber') 
const promessa = new Promise((resolve, reject) => {
	if (aceitar) {
		return resolve('pedido aceito!')
	}

	return reject('pedido negado!')
})

console.log('aguardando')

promessa
	.then(result => console.log(result))
	.catch(erro => console.log(erro))
	.finally(() => console.log('finalizada'))

----------------------------------------------------------------
----------------------------------------------------------------

 O que é API?

 front-end(faz o pedido) <-api-> back-end(prepara os dados)

 cliente <-garçom-> cozinha

 (cliente-front) faz o pedido para (garçom-api) <- que leva ou traz o pedido para -> (cozinha-back) prepara os(pratos-dados) 

----------------------------------------------------------------
----------------------------------------------------------------

 JSON -> formato de arquivo que geralmente são passados e retornados pelas apis

----------------------------------------------------------------
----------------------------------------------------------------

MÉTODOS HTTP MAIS USADOS

GET 
- API fornece informações

POST 
- a API recebe informações que devem ou não ser registradas

PUT 
- a API recebe informações para update de um ou mais registros

PATCH 
- a API recebe informações para update de um registro

DELETE 
- a API recebe identificadores de registros que devem ser apagados

