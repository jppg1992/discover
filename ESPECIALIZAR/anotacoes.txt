Sistema Síncrono
Um sistema síncrono (synchronous) é uma tarefa que é concluída após a outra.

No exemplo apresentado na aula, uma imagem só carrega depois que a anterior termina de carregar. Ou seja, no sistema síncrono a tarefa anterior precisa ser concluída, para então iniciar a próxima.

Por padrão, o JavaScript é um sistema síncrono
----------------------------------------------------------------
-----------------------------------------------------------------
Sistema Assíncrono
Num sistema assíncrono (asynchronous) as tarefas são executadas de maneira independente uma da outra.

No exemplo apresentado na aula, as imagens são carregadas de maneira independente, não é necessário esperar a primeira imagem carregar para iniciar o carregamento da próxima.

O JavaScript poderá usar o assincronismo ao seu favor

----------------------------------------------------------------
-----------------------------------------------------------------


Callback Conceito

Antes de entender o conceito de Callback no JavaScript, primeiro precisamos entender que funções aceitam qualquer tipo de dado como argumento, então no JavaScript é possível passar qualquer tipo de dado em uma função.

function imprimirDado(dado) {
  console.log(dado)
}

imprimirDado(1)
imprimirDado('texto')
imprimirDado(true)
imprimirDado({ nome: 'João' })
imprimirDado([1, 2, 3])


function imprimirDado(dado) {
  console.log('outras tarefas')
  console.log(dado())
}

imprimirDado(function () {
  return 'Olá Mundo'
})


Callback (chamar de volta) é uma função que é passada como argumento de outra função e depois de algum tempo ela é chamada de volta.

----------------------------------------------------------------
-----------------------------------------------------------------
Set TimeOut
setTimeout() é uma função que recebe como argumento uma outra função e um tempo para ser executada.

// setTimeout(function, delay)
setTimeout(function () {
	console.log('depois de 1s')
}, 1000)
A função de argumento do setTimeout é uma callback, ela vai executar depois de um certo tempo. No caso do exemplo acima, a função vai ser executada depois de 1000ms que é o mesmo que 1s.

----------------------------------------------------------------
-----------------------------------------------------------------
Conectando API com HTTPS e Callback
Nesta aula vamos verificar se estamos entendendo como que funciona o callback e o assincronismo no JavaScript.

Código da aula:

const https = require('http')
const API = 'https://jsonplaceholder.typicode.com/users?_limit=2'

https.get(API, res => {
	console.log(res.statusCode)
})

console.log('conectando API')

executou primeiro o console.log('conectando a api')
 pois a arrow function (callback) executou após algumas tarefas, exepmlos conecatra a api

----------------------------------------------------------------
----------------------------------------------------------------
 Promise intro
 Nas próximas aulas iremos ver mais sobre Promises no JavaScript.

----------------------------------------------------------------
----------------------------------------------------------------
O que é uma Promise no JavaScript?

É um objeto JavaScript com a promessa de que algo será realizado
É usado para operações assíncronas
Não bloqueia outras operações
Essa promessa não significa que vai dar certo ou que vai dar errado.
Exemplo:

Carregar um arquivo
Leitura de dados de uma API
Uma promessa poderá ser:

Pending: Estado inicial, assim que o objeto da promessa é iniciado
Fulfilled: A promessa foi concluída com sucesso
Rejected: A promessa foi rejeitada, houve um erro
Settled: Seja com sucesso ou erro, ela foi finalmente concluída

----------------------------------------------------------------
----------------------------------------------------------------


Como criar uma promessa?
Nesta aula vamos ver na prática quais são os detalhes de uma Promise no javaScript

// Promessa retorna com sucesso
console.log('pedir uber') 
const promessa = new Promise((resolve, reject) => {
	return resolve('carro chegou')
})

console.log('aguardando')

promessa.then(result => console.log(result))

// Promessa é rejeitada e usamos o catch() para capturar o erro
console.log('pedir uber') 
const promessa = new Promise((resolve, reject) => {
	return reject('pedido negado!')
})

console.log('aguardando')

promessa
	.then(result => console.log(result))
	.catch(erro => console.log(erro))
let aceitar = true

console.log('pedir uber') 
const promessa = new Promise((resolve, reject) => {
	if (aceitar) {
		return resolve('pedido aceito!')
	}

	return reject('pedido negado!')
})

console.log('aguardando')

promessa
	.then(result => console.log(result))
	.catch(erro => console.log(erro))
	.finally(() => console.log('finalizada'))

----------------------------------------------------------------
----------------------------------------------------------------

 O que é API?

 front-end(faz o pedido) <-api-> back-end(prepara os dados)

 cliente <-garçom-> cozinha

 (cliente-front) faz o pedido para (garçom-api) <- que leva ou traz o pedido para -> (cozinha-back) prepara os(pratos-dados) 

----------------------------------------------------------------
----------------------------------------------------------------

 JSON -> formato de arquivo que geralmente são passados e retornados pelas apis

----------------------------------------------------------------
----------------------------------------------------------------

MÉTODOS HTTP MAIS USADOS

GET 
- API fornece informações

POST 
- a API recebe informações que devem ou não ser registradas

PUT 
- a API recebe informações para update de um ou mais registros

PATCH 
- a API recebe informações para update de um registro

DELETE 
- a API recebe identificadores de registros que devem ser apagados

--------------------------------------------------------------------
--------------------------------------------------------------------
O que é o TypeScript?
O TypeScript foi criado pela Microsoft para trazer um superset de tipagens para o JavaScript.

A diferença entre o JavaScript e TypeScript é a sua tipagem que no JS não é obrigatório, já no TS é obrigatório, mas nem pra todos os casos. Algumas vantagens de utilizar o TS é que a sua adoção pode ocorrer de forma gradual em um projeto JavaScript.

---------------------------------------------------------------------
---------------------------------------------------------------------

Porquê utilizar TypeScript?
A maior vantagem de usar o TypeScript além de aumentar a nossa produtividade no dia a dia é ele reconhecer os erros durante o desenvolvimento, diferente do JavaScript que reconhecerá apenas quando o projeto é executado.

Exemplo:

function sum(a, b){
  return a + b;
}

console.log(sum('1', '2'));

// Ao executar esse trecho de código o resultado seria 12.
Se estivéssemos utilizando o TypeScript não precisaríamos executar para identificar o erro.


Verificação tipo estático
Já sabemos que o TypeScript verifica erros antes da execução, mas vamos ver isso na prática:

const userName = "João Inácio"

userName()
Ao tentar como uma função o TypeScript nos avisará que o que estamos querendo executar é uma variável do tipo String.


Compilação
O TypeScript é sempre compilado para JavaScript, mas normalmente não estamos vendo isso. Observe os exemplos:

Código em TypeScript:

function showTicket(user: string,  ticket: number) {
    console.log(`Olá ${user ?? 'Usuário Padrão'}. Seu número de bilhete é: ${ticket}`)
}

showTicket('João Inácio', 123)
Resultado da conversão para JavaScript:

"use strict";
function showTicket(user, ticket) {
    console.log(`Olá ${user !== null && user !== void 0 ? user : 'Usuário Padrão'}. Seu número de bilhete é: ${ticket}`);
}
showTicket('João Inácio', 123);


Tipagem explícita
Na tipagem explícita nós especificamos o qual será o tipo de cada variável.

user: string, ticket: number;

O TypeScript nos ajuda a identificar cada tipo de variável ao invocá-las.

Any
Ao declarar uma variável no TypeScript o seu tipo por padrão será any. Mas devemos tomar um certo cuidado com essa tipagem que ela pode ser perigosa ao decorrer do nosso projeto, não é muito recomendada a sua utilização.

Exemplo:

let info: any;

info = [123];
info = 'João';
info = true;
info = 10.50;

// Com o tipo any a variável aceitará qualquer valor.

Inferência de tipos
O TypeScript reconhece automaticamente o tipo da variável ao passar algum valor para ela.

let user = "João"

user = 10

Matrizes
Existem duas maneiras de tipar arrays no TypeScript, confira os exemplos:

let numbers: number[];
numbers = [1,2,3,4,5,6];

let users: Array<string>;
users = ['Rodrigo', 'João'];


Funções
Uma função pode ter ou não um retorno, quando ela não tem um retorno ela é do tipo void

Dessa maneira, tipamos dessa forma no TypeScript:

function showMessages(message: string):void {
    console.log(message)
}
Já quando a função tem um retorno, a tipagem é inferida automaticamente na função.

function showMessages(message: string) {
   return message;
}

console.log(showMessages("Oi, João"))


Union
O Operador Union, representado pelo pipe | nos permite adicionar mais de um tipo na variável. Vamos ao exemplo:

function printUserId(id: number | string) {
    console.log(`O ID do usuário é: ${id}`);
}

printUserId(101);
printUserId("101");

// Dessa forma, podemos passar tanto number quanto string

Generics
O generic no TypeScript nos permite reutilizar uma determinada implementação de código, de forma tipada. Para representar um generic, nós declaramos ele dessa forma <T> (podendo ser utilizado qualquer outra letra, existem as convenções que podemos seguir:

<S> → Representando State <T> → Representando Type <K> → Representando Key <V> → Representando Value <E> → Representando Element

Exemplo de um trecho de código utilizando generics:

function useState<T>() {
    let state: T;

    function get(){
        return state;
    }

    function set(newValue: T){
        state = newValue;
    }

    return { get, set}
}

let newState = useState();
newState.get();
newState.set("João");
newState.set(123);


Type
Para não ficar sempre repetindo os tipos para todas as variáveis podemos criar Types para cada uma delas.

Veja o exemplo a seguir:

type IdType = string | number | undefined;

let userId: IdType;
let adminId: IdType;

userId = 1;
userId = '1';
userId = undefined;

adminId = 1;
adminId = '2';
adminId = undefined;

Intersecção de tipos
A intersecção de tipos como o próprio nome já diz, podemos unir dois tipos e usar as suas propriedades dentro de um objeto.

Segue o exemplo abaixo:

type User = {
    id: number,
    name: string,
}

type Char = {
    nickname: string,
    level: number
}

type PlayerInfo = User & Char;

let info: PlayerInfo = {
    id: 1,
    name: 'João Inácio',
    nickname: 'birobirobiro',
    level: 50
}

Interface
Outra maneira de criar tipagens no TypeScript é utilizando a interface .

Segue o exemplo:

interface User {
    id: number
    name: string,
}

let newUser: User = {
    id: 1,
    name: "João"
}

function registerNewUser(newUser: User){
    newUser.id
    newUser.name
}